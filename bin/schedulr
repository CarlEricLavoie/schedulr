#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'schedulr'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/schedulr` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/schedulr now"
  exit 64
end

include GLI::App

program_desc 'Program that allows user to manage their timesheet.'

version Schedulr::VERSION

subcommand_option_handling :normal
arguments :strict

# desc 'Describe some switch here'
# switch [:s,:switch]

desc 'This flag allows to apply commands on a specific instance of shedulr rather than on the default one.'
default_value 'default'
arg_name 'instance name'
flag [:i,:instance]

desc 'This flag allows to export timesheet to a specific file.'
default_value 'shedulr.timesheet'
arg_name 'file name'
flag [:f,:file]

pre do |global,command,options,args|
  Schedulr.load(global[:file])
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

arg_name '[activity_name]'
desc 'Adds an activity to the list of activities'
command :add do |c|


  c.action do |global_options, options, args|
    puts 'add command called'

    activity = args.shift
    Schedulr.add( activity, true )
  end
end

arg_name '[activity_id]'
desc 'Removes and activity from the list of activities'
command :remove do |c|
  c.action do |global_options, options, args|

    activity_id = args.shift.to_i
    Schedulr.remove( activity_id, true )
  end
end

desc 'Edits an activity name'
command :rename do |c|
end

desc 'Displays the current activity'
command :current do |c|
end

desc 'Sets the current activity'
command :set do |c|
end

desc 'Lists all activities'
command :list do |c|
  c.action do |global_options, options, args|
    Schedulr.list()
  end
end

desc 'Displays the schedule for a given day'
command :day do |c|
end

desc 'Displays the schedule for a given week split by day'
command :week do |c|
end

desc 'Starts the timer'
command :start do |c|
end

desc 'Stops the timer'
command :stop do |c|
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
